package com.xiaofu.array;

/**
 * 该程序用来测验数组的特性
 * 1.数组是一种引用数据类型
 * 2.数组是一种容器，用来保存数据的
 * 3.数组只能保存相同类型的数据，数组当中保存的是变量的"值"
 * 4.数组的检索效率很高，但是增删效率缺很低
 * 5.因为数组中每个元素的内存地址在空间存储上都是连续的，数组存储的元素类型都是一致的，所以数组中每个元素和每个元素之间
 * 的内存地址是可以确定的，又因为数组也是一个保存在堆内存中的对象，也有引用指向它，引用中保存的是数组第一个元素的内存地址，
 * 数组是有下标的，所以可以通过第一个元素的内存地址，和数组下标，来计算数组中每个元素的内存地址，所以数组的检索效率很快。
 * 6.正是因为要保证数组中每个元素的内存地址在空间存储上是连续的，所以在往数组中插入元素时，该元素后面所有的元素都要向后移动
 * 位置，所以这样效率时很低的
 * 7.在java中数组扩容的效率也很低，因为数组的扩容的原理是要准备一个更大的数组，然后将原数组中每个元素都复制到这个更大的数组
 * 中，这样的效率就会慢很多，所以一般在开发中，我们都要预估数组中能存储多少个元素，避免数组扩容
 * 8.一维数组创建方式：
 * 静态初始化 int [] a={1,23,34,343,3....}
 * 动态初始化 int [] b=new int[5]; 这代表创建一个容量为5的数组，初始值都为0
 * 9.数组遍历方式
 * 普通遍历
 * foreach遍历
 *
 * @author fmk
 * @date 2020/5/7
 **/
public class ArrayText01 {
    public static void main(String[] args) {
        // 静态初始化一个一维数组
        int [] a={1,2,3,4,5,6,7};
        // 获取这个数组的长度
        System.out.println(a.length);
        // 遍历这个数组，普通遍历
        for (int i = 0; i <a.length ; i++) {
            System.out.println(a[i]);
        }
        System.out.println("==========================");
        // 采用foreach遍历这个数组
        for (int i : a) {
            System.out.println(i);
        }
        // 采用动态初始化一个数组
        String [] s=new String[5];
        // 采用foreach去遍历这个数组
        for (int i = 0; i < s.length; i++) {
            System.out.println(i);
        }
        System.out.println("******************");
        // 采用普通遍历
        for (int i = 0; i < s.length; i++) {
            System.out.println(s[i]);
        }



    }
}
